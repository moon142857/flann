#include <time.h>
  #include <sys/types.h>
   #include <sys/time.h>
   #include <sys/resource.h>
#include <flann/flann.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <float.h>
#define random(x) rand()%(x)
#include "standalone_utils.h"

using namespace flann;
float A1[] = {0.027904,0.008165,-0.016216,0.038300,-0.064714,0.091668,-0.125231,0.016729,0.041737,0.073088,0.050529,0.074768,0.092020,0.021182,0.037864,-0.036610,-0.014878,0.004795,0.023840,-0.014669,-0.053501,0.025635,0.007833,-0.019397,-0.004728,-0.041092,0.016046,0.067942,-0.012732,0.111436,0.105730,-0.036629,0.013017,0.041272,-0.016910,-0.010036,-0.001377,-0.037550,-0.025227,-0.116117,0.010197,-0.082421,0.116458,-0.004367,-0.025777,-0.069945,-0.152072,-0.061343,-0.095305,0.055599,0.022037,-0.001462,-0.145644,0.180299,-0.093235,0.014251,0.083256,0.005355,-0.054308,0.006741,0.008279,0.062321,-0.009001,0.006057,-0.053757,-0.082459,-0.073677,-0.070126,0.025379,-0.005184,0.023727,-0.036022,0.065692,-0.051469,0.090263,-0.106024,0.004320,-0.056368,-0.037607,-0.030002,0.053710,-0.083570,0.064533,-0.097697,0.018505,0.006371,0.080323,-0.019017,-0.134821,0.143204,-0.014868,-0.127064,-0.040816,-0.003247,-0.087301,-0.050425,-0.077484,0.016425,-0.033297,0.102350,-0.078595,0.092428,-0.050168,-0.017232,-0.247538,0.079639,-0.007425,0.038319,0.049409,0.004795,0.089314,0.013662,-0.029746,-0.021590,-0.115404,-0.015713,0.079117,-0.005991,0.052646,-0.205962,0.064533,-0.002791,0.165725,0.041073,-0.021600,-0.055409,-0.093226,0.018932,-0.037949,0.017422,-0.039839,-0.008982,-0.038975,-0.004348,-0.131478,0.014640,-0.057868,0.001709,0.006523,-0.036202,-0.088488,0.119791,0.053197,0.136957,-0.051213,-0.018780,-0.073847,0.109395,-0.137935,0.081035,-0.044918,0.089266,0.021999,-0.199145,0.078129,-0.020100,0.094431,0.043057,-0.095675,0.041234,-0.161899,0.161965,-0.016254,0.104752,-0.008773,0.088421,-0.006190,-0.013634,-0.007709,0.046874,-0.108939,-0.029214,-0.034360,-0.043864,0.046722,-0.047368,0.092580,-0.008260,-0.068806,-0.040987,-0.042174,0.046285,-0.051830,0.157256,0.107306,0.001082,0.031873,-0.016900,0.013957,-0.124680,0.004861,-0.035243};
float A2[] = {0.149197 ,0.008954 ,-0.117991 ,-0.007878 ,-0.015739 ,0.060657 ,0.014585 ,-0.114740 ,0.058269 ,0.098198 ,0.006319 ,-0.070624 ,-0.019881 ,0.031760 ,-0.051818 ,0.047782 ,0.052426 ,-0.010998 ,0.061529 ,0.082591 ,-0.091228 ,0.021441 ,0.080697 ,0.087341 ,-0.103327 ,0.098965 ,-0.135185 ,0.066958 ,-0.071126 ,-0.014056 ,-0.053395 ,-0.105134 ,-0.011888 ,-0.021573 ,-0.032377 ,0.044098 ,-0.004221 ,-0.057934 ,0.099679 ,-0.032113 ,-0.014585 ,-0.089668 ,-0.066755 ,-0.005649 ,-0.000599 ,-0.098745 ,0.126725 ,-0.064693 ,-0.125429 ,-0.107795 ,-0.137687 ,-0.030747 ,-0.011694 ,0.074360 ,0.032642 ,0.065803 ,-0.071558 ,0.109355 ,0.093475 ,-0.013659 ,-0.035479 ,0.025274 ,0.046583 ,0.126302 ,0.019784 ,-0.047200 ,0.106808 ,-0.074730 ,-0.002600 ,0.027777 ,-0.121552 ,-0.039604 ,-0.012628 ,0.056550 ,0.131060 ,-0.019511 ,0.043472 ,0.043895 ,-0.009377 ,0.066597 ,-0.090575 ,-0.010892 ,-0.156458 ,0.131827 ,-0.137767 ,0.068861 ,0.028949 ,-0.047209 ,-0.080600 ,0.057484 ,-0.037030 ,0.065142 ,0.108747 ,0.010108 ,0.111285 ,0.047209 ,-0.028517 ,-0.065918 ,-0.037489 ,0.074475 ,0.039075 ,-0.009236 ,0.016982 ,0.050302 ,0.001366 ,0.028130 ,-0.023662 ,0.005208 ,0.015448 ,0.108712 ,-0.007693 ,-0.029998 ,-0.064693 ,-0.021652 ,0.063829 ,0.066482 ,-0.077251 ,0.051677 ,0.006301 ,-0.049861 ,-0.024367 ,-0.056286 ,-0.084680 ,-0.046627 ,0.076616 ,0.164196 ,0.196132 ,0.082080 ,-0.031919 ,0.012355 ,-0.040176 ,0.185064 ,0.055704 ,0.069751 ,0.043516 ,0.006319 ,0.050760 ,0.049967 ,-0.059115 ,0.045878 ,0.123032 ,-0.027724 ,-0.046654 ,-0.021811 ,-0.053254 ,-0.100049 ,-0.020163 ,0.023477 ,-0.091862 ,0.024014 ,-0.054021 ,-0.004803 ,-0.107593 ,-0.047782 ,0.127509 ,-0.071285 ,0.036678 ,-0.156537 ,0.063248 ,-0.007156 ,-0.016338 ,-0.102869 ,-0.108668 ,0.094374 ,-0.019661 ,-0.002194 ,0.032386 ,0.014946 ,0.019449 ,0.002397 ,-0.007253 ,-0.061115 ,-0.094964 ,-0.064596 ,-0.046662 ,0.051421 ,-0.050276 ,0.049897 ,0.001710 ,-0.057854 ,0.080053 ,0.069901 ,-0.140675 ,-0.016964 ,0.041578 ,0.139617 ,-0.048425 ,-0.059405 ,0.000291 ,-0.040124 ,0.182905 ,-0.049853};
float A3[]  = {0.041119 ,-0.150190 ,-0.020105 ,0.025278 ,0.109490 ,0.009043 ,0.100202 ,0.085707 ,0.002455 ,-0.092417 ,0.088083 ,0.071552 ,-0.046589 ,0.059957 ,-0.064186 ,-0.064177 ,-0.059372 ,-0.028248 ,-0.065785 ,-0.007558 ,-0.001817 ,0.126249 ,0.131299 ,0.125751 ,-0.120840 ,0.036715 ,-0.075422 ,-0.006964 ,0.067087 ,0.042360 ,0.002438 ,0.008519 ,-0.022954 ,0.014723 ,0.116096 ,-0.056392 ,-0.070818 ,-0.117398 ,-0.007042 ,0.006509 ,0.005793 ,-0.076087 ,0.056707 ,-0.036226 ,0.077371 ,0.036357 ,-0.013884 ,0.185638 ,-0.073247 ,0.076209 ,-0.014155 ,-0.024666 ,-0.035815 ,-0.018349 ,0.137686 ,-0.086720 ,-0.014697 ,0.059782 ,0.047087 ,0.066702 ,0.063950 ,0.057196 ,-0.060525 ,0.131788 ,-0.009585 ,0.079188 ,0.030686 ,0.079494 ,0.004806 ,-0.198036 ,0.050931 ,0.008362 ,0.001083 ,0.015631 ,0.126109 ,-0.088808 ,-0.064990 ,-0.085217 ,0.014583 ,0.052880 ,-0.096594 ,0.028345 ,-0.092583 ,-0.080176 ,0.074566 ,0.133326 ,0.072539 ,-0.105672 ,0.044063 ,0.007663 ,-0.130591 ,0.064282 ,-0.116393 ,-0.027576 ,-0.108494 ,-0.031577 ,-0.026641 ,-0.009856 ,-0.014522 ,0.095012 ,0.021791 ,-0.106135 ,0.025330 ,0.019074 ,-0.004788 ,-0.040769 ,0.067218 ,0.032617 ,-0.004220 ,0.009751 ,-0.036270 ,-0.046492 ,0.107550 ,-0.036357 ,-0.042089 ,-0.042395 ,0.044535 ,0.065741 ,0.059083 ,-0.150539 ,0.005417 ,0.086720 ,0.047218 ,-0.112976 ,-0.187377 ,-0.025208 ,-0.029140 ,0.255241 ,-0.124720 ,0.032801 ,-0.052347 ,0.068529 ,-0.015701 ,0.039319 ,-0.090477 ,-0.001249 ,0.072452 ,-0.062203 ,-0.037336 ,-0.023128 ,-0.077948 ,-0.037624 ,-0.055885 ,0.138761 ,0.035413 ,-0.044186 ,0.009314 ,-0.052251 ,0.007471 ,0.007794 ,0.036645 ,-0.097808 ,-0.025260 ,0.055920 ,-0.001695 ,-0.160107 ,-0.093334 ,0.057668 ,-0.019992 ,0.073719 ,-0.020358 ,0.005443 ,-0.016322 ,0.082098 ,-0.079223 ,-0.068834 ,-0.030345 ,0.063321 ,0.062465 ,0.016479 ,-0.102273 ,-0.002691 ,-0.042919 ,-0.051525 ,-0.067585 ,0.019913 ,0.000446 ,0.060036 ,-0.071919 ,-0.084815 ,0.009017 ,-0.046912 ,0.045400 ,0.051394 ,-0.083889 ,-0.094977 ,-0.016662 ,-0.109481 ,0.037178 ,-0.005819 ,0.027899 ,0.014321};
float A4[]  ={0.098315 ,-0.067300 ,-0.011750 ,0.018802 ,0.070991 ,0.027601 ,0.018829 ,0.015806 ,-0.016306 ,-0.104538 ,-0.056575 ,0.082990 ,-0.048792 ,-0.039984 ,-0.056744 ,0.025194 ,-0.104342 ,-0.024570 ,-0.102764 ,-0.007819 ,-0.033966 ,0.054221 ,0.034983 ,0.074985 ,-0.089570 ,0.118035 ,-0.078649 ,-0.124365 ,0.168637 ,-0.190479 ,-0.037399 ,0.016181 ,0.087332 ,0.082170 ,0.046171 ,0.047241 ,-0.132924 ,-0.008166 ,-0.055461 ,-0.067389 ,0.100196 ,-0.030374 ,0.033111 ,0.001872 ,0.111438 ,0.007819 ,0.023340 ,0.037586 ,0.026781 ,-0.011304 ,-0.068539 ,-0.038050 ,-0.009263 ,-0.033449 ,-0.010760 ,-0.029411 ,0.033325 ,0.009396 ,0.040671 ,0.151815 ,-0.054961 ,0.120674 ,0.043916 ,0.117492 ,-0.039173 ,0.039654 ,0.027432 ,0.001043 ,-0.003842 ,-0.051681 ,0.013649 ,-0.016912 ,0.036543 ,0.065044 ,0.051797 ,-0.057270 ,0.050192 ,-0.105412 ,-0.019007 ,0.048783 ,0.003477 ,0.086146 ,-0.018838 ,-0.037345 ,0.030463 ,0.122760 ,-0.038477 ,0.008113 ,-0.003602 ,-0.015031 ,-0.179184 ,0.157556 ,-0.167398 ,-0.052082 ,-0.082206 ,-0.066631 ,0.017687 ,0.028742 ,0.020300 ,0.103566 ,0.056120 ,-0.138353 ,-0.088357 ,0.044415 ,-0.131569 ,-0.045538 ,0.081038 ,0.101373 ,-0.056548 ,0.006731 ,-0.012472 ,0.015619 ,0.041152 ,-0.055648 ,0.020514 ,-0.045404 ,0.025782 ,0.025417 ,0.019676 ,-0.048739 ,-0.006205 ,0.038602 ,0.012900 ,0.046349 ,-0.053330 ,0.062298 ,-0.157725 ,0.126157 ,-0.084488 ,-0.005839 ,-0.064206 ,0.196319 ,0.062013 ,0.136730 ,-0.109424 ,0.006107 ,-0.030133 ,-0.076411 ,0.047615 ,-0.028466 ,0.003129 ,0.052750 ,-0.065392 ,0.040091 ,0.039940 ,-0.071222 ,0.044656 ,-0.008541 ,0.009379 ,0.015218 ,-0.036623 ,0.013801 ,0.014888 ,0.002514 ,0.011492 ,-0.138825 ,-0.154017 ,-0.074771 ,-0.063350 ,0.117367 ,-0.111893 ,-0.062931 ,0.024873 ,0.042142 ,0.018900 ,-0.083285 ,-0.029500 ,0.104574 ,-0.073915 ,0.161987 ,-0.024097 ,0.003334 ,-0.043006 ,-0.066792 ,-0.012552 ,0.149443 ,-0.052421 ,0.074619 ,-0.017857 ,0.005215 ,-0.055728 ,0.096942 ,0.065276 ,0.062584 ,-0.065410 ,0.027717 ,-0.026959 ,-0.125952 ,-0.123518 ,0.072693 ,0.004761 ,-0.096274};
float A5[]  ={0.081183 ,0.134009 ,-0.031973 ,-0.079932 ,-0.035329 ,-0.022653 ,0.076370 ,-0.041932 ,0.018505 ,-0.024272 ,-0.047789 ,0.026494 ,-0.074535 ,-0.036660 ,0.024461 ,0.046061 ,0.004273 ,0.121774 ,-0.089594 ,-0.008861 ,-0.155124 ,-0.117834 ,-0.046196 ,-0.027736 ,-0.095298 ,-0.010931 ,0.021312 ,-0.038585 ,0.028635 ,-0.035122 ,0.070414 ,0.059070 ,-0.079797 ,-0.149303 ,0.159442 ,-0.037641 ,-0.083126 ,0.070477 ,0.053438 ,-0.064297 ,-0.140640 ,0.139821 ,-0.115324 ,0.031163 ,0.071764 ,0.010553 ,0.109890 ,0.029724 ,0.047357 ,-0.073491 ,-0.031676 ,0.028536 ,-0.003275 ,-0.057289 ,0.063568 ,0.025900 ,-0.003239 ,0.070873 ,0.094947 ,0.047132 ,0.040546 ,0.103188 ,0.147810 ,-0.025658 ,-0.145426 ,-0.102963 ,0.117564 ,-0.015393 ,0.081624 ,-0.081309 ,0.079042 ,0.003805 ,-0.053582 ,0.010229 ,0.003958 ,-0.030093 ,-0.054023 ,0.040394 ,0.027484 ,0.127451 ,-0.029022 ,-0.001934 ,0.094866 ,0.026980 ,-0.124248 ,-0.014142 ,-0.010895 ,0.075290 ,-0.073410 ,0.054680 ,-0.119516 ,0.044199 ,0.068966 ,0.110052 ,-0.109278 ,-0.083234 ,0.085033 ,0.073464 ,0.017858 ,-0.006064 ,-0.037164 ,-0.015600 ,-0.076514 ,0.038576 ,-0.062129 ,-0.045746 ,-0.128836 ,0.084323 ,0.010346 ,-0.051432 ,0.039188 ,0.069946 ,-0.080607 ,-0.032603 ,-0.163490 ,-0.087930 ,0.077251 ,0.086302 ,0.095847 ,0.022869 ,-0.040528 ,-0.051774 ,0.018910 ,-0.109629 ,0.004480 ,-0.018155 ,0.020728 ,0.112364 ,-0.124788 ,-0.109422 ,-0.036660 ,-0.044433 ,0.028842 ,-0.100102 ,0.041347 ,0.008852 ,0.101793 ,0.036588 ,-0.053546 ,-0.107182 ,0.075227 ,0.052521 ,-0.012973 ,-0.056542 ,0.134927 ,0.021798 ,0.000045 ,0.091736 ,-0.082541 ,-0.056002 ,-0.040528 ,0.043947 ,-0.060347 ,-0.045000 ,0.035769 ,0.027034 ,-0.003464 ,0.043461 ,0.099526 ,0.091942 ,-0.084988 ,-0.126452 ,-0.021231 ,0.000090 ,0.100579 ,0.065925 ,-0.063541 ,0.026836 ,-0.019063 ,0.024110 ,0.001259 ,-0.126075 ,-0.090197 ,-0.029040 ,-0.103899 ,0.071575 ,-0.066159 ,-0.011110 ,-0.037209 ,-0.079069 ,0.021690 ,0.092905 ,0.004930 ,0.063631 ,0.072735 ,-0.091547 ,0.109746 ,-0.019927 ,-0.019765 ,0.092410 ,0.090134 ,-0.052889};
float A6[]  ={-0.035051 ,0.119318 ,-0.017490 ,-0.149270 ,-0.082456 ,-0.028861 ,0.033853 ,0.058524 ,-0.007659 ,-0.051640 ,0.030942 ,0.006380 ,-0.151270 ,0.043773 ,-0.067507 ,0.010867 ,-0.044684 ,0.151829 ,-0.098846 ,-0.061425 ,-0.140088 ,-0.085844 ,-0.058920 ,-0.042116 ,-0.123950 ,0.026572 ,0.036349 ,-0.015778 ,0.008984 ,0.015003 ,0.041620 ,0.053487 ,-0.020238 ,-0.085204 ,0.112425 ,-0.027050 ,-0.066021 ,0.008686 ,0.056983 ,-0.008749 ,-0.139223 ,0.151036 ,-0.055586 ,-0.089457 ,0.001694 ,-0.002730 ,0.086628 ,0.113083 ,-0.043089 ,-0.002649 ,-0.138259 ,-0.005938 ,0.016255 ,0.036132 ,-0.013183 ,0.082141 ,0.085601 ,-0.004586 ,0.129861 ,-0.014795 ,0.014858 ,0.064146 ,0.117723 ,0.007145 ,-0.082852 ,-0.028555 ,0.129843 ,-0.010281 ,0.064930 ,-0.038106 ,0.057632 ,-0.019075 ,-0.090728 ,0.043692 ,-0.049387 ,-0.017535 ,-0.139772 ,0.046188 ,0.187628 ,0.060831 ,-0.037917 ,0.021220 ,0.052847 ,0.005109 ,-0.090998 ,0.023247 ,-0.059938 ,0.066183 ,-0.141989 ,0.085664 ,-0.059740 ,0.112182 ,0.038728 ,0.008353 ,-0.002919 ,-0.085889 ,0.064273 ,0.099306 ,0.002550 ,-0.031078 ,0.019184 ,-0.000712 ,-0.073166 ,-0.073211 ,-0.017994 ,-0.100018 ,-0.078527 ,0.049766 ,0.024617 ,-0.016336 ,0.068742 ,0.071896 ,-0.069769 ,0.004154 ,-0.124590 ,-0.115786 ,-0.017048 ,0.055217 ,0.125653 ,0.014922 ,-0.040719 ,0.019292 ,0.016120 ,-0.028510 ,-0.029339 ,0.024365 ,0.077743 ,0.045116 ,-0.031600 ,-0.090620 ,0.044368 ,-0.036105 ,0.077572 ,-0.115966 ,0.102847 ,-0.041043 ,0.041016 ,0.022914 ,-0.102649 ,-0.070850 ,0.064146 ,-0.078104 ,0.051414 ,-0.112948 ,0.039160 ,-0.052072 ,0.069850 ,0.045395 ,-0.096116 ,0.036015 ,-0.044584 ,0.029492 ,-0.094800 ,0.090620 ,0.041503 ,-0.058335 ,0.017454 ,-0.033069 ,0.103730 ,0.117714 ,-0.024527 ,-0.093269 ,-0.012741 ,0.044278 ,0.149684 ,0.018751 ,-0.013444 ,0.030023 ,0.070472 ,0.049396 ,-0.082483 ,-0.202378 ,-0.086141 ,-0.049189 ,-0.119508 ,0.076022 ,0.000883 ,0.034375 ,-0.035421 ,-0.083339 ,-0.020328 ,0.114353 ,-0.101576 ,0.027023 ,0.121400 ,-0.041305 ,0.070454 ,-0.014732 ,-0.054820 ,0.051261 ,0.036015 ,-0.046269};
float A7[]  ={0.052207 ,0.156453 ,-0.014940 ,0.033011 ,0.073778 ,0.001872 ,-0.063353 ,-0.048950 ,0.008620 ,-0.081626 ,-0.016753 ,0.003425 ,0.102853 ,-0.063521 ,0.056781 ,0.027581 ,0.036377 ,0.028110 ,-0.045039 ,0.052786 ,-0.033188 ,-0.067164 ,0.098421 ,0.079385 ,-0.018012 ,0.126950 ,0.014260 ,0.081953 ,0.011457 ,-0.067273 ,0.029897 ,-0.033297 ,0.037510 ,0.040616 ,0.071973 ,-0.026355 ,-0.052274 ,-0.002417 ,-0.060105 ,0.089759 ,0.045534 ,0.037049 ,0.074542 ,0.049840 ,0.097456 ,0.008863 ,-0.150208 ,-0.040792 ,0.076665 ,-0.065301 ,0.114864 ,0.078881 ,-0.090003 ,-0.036973 ,0.103549 ,-0.161900 ,-0.088702 ,0.008603 ,0.049706 ,0.004633 ,0.081072 ,0.036201 ,0.110969 ,-0.002098 ,-0.000848 ,0.082180 ,0.193720 ,-0.029394 ,-0.057226 ,-0.039516 ,-0.095081 ,-0.063370 ,-0.004893 ,0.065175 ,0.061222 ,-0.002644 ,0.076212 ,0.048967 ,-0.003231 ,0.018096 ,-0.046919 ,0.031500 ,-0.001821 ,0.032818 ,0.053357 ,-0.016300 ,0.041186 ,0.009401 ,0.013941 ,-0.028428 ,-0.032331 ,0.004658 ,-0.076506 ,-0.075860 ,-0.015561 ,-0.087300 ,-0.088500 ,-0.013983 ,-0.010072 ,0.047179 ,-0.014563 ,-0.075650 ,-0.085747 ,-0.177974 ,-0.082625 ,0.012615 ,0.150628 ,-0.093788 ,-0.041438 ,-0.091732 ,-0.005607 ,-0.037770 ,0.111825 ,0.116391 ,-0.138777 ,-0.105337 ,-0.022016 ,0.071646 ,-0.045987 ,-0.028907 ,-0.001805 ,0.137408 ,-0.126841 ,-0.053164 ,0.046793 ,-0.012892 ,0.012053 ,0.079368 ,-0.011146 ,-0.091161 ,-0.008880 ,0.032231 ,0.131810 ,0.016552 ,-0.051619 ,-0.009829 ,0.137962 ,-0.145600 ,-0.118154 ,0.037166 ,-0.033171 ,0.067147 ,0.015947 ,0.008679 ,-0.144937 ,-0.094392 ,-0.043520 ,0.039760 ,-0.023753 ,0.123224 ,-0.007823 ,-0.069607 ,0.104775 ,-0.035185 ,0.080619 ,0.000369 ,0.011642 ,0.062506 ,-0.106076 ,0.092873 ,-0.096314 ,-0.147355 ,0.135554 ,-0.022822 ,0.025524 ,-0.040490 ,-0.045820 ,-0.038752 ,0.014823 ,-0.030199 ,-0.044502 ,0.007160 ,-0.046827 ,-0.080056 ,0.041212 ,0.084337 ,0.142520 ,0.043469 ,0.079058 ,-0.034094 ,0.058259 ,0.110759 ,0.027262 ,0.040683 ,-0.059652 ,0.103247 ,0.040691 ,0.133824 ,0.021705 ,-0.129418 ,0.082784 ,0.053961};
float A8[]  ={0.003554 ,0.049137 ,-0.084644 ,0.011128 ,-0.013462 ,0.035113 ,-0.095965 ,-0.066171 ,0.039395 ,-0.005801 ,-0.019755 ,0.047724 ,0.058781 ,-0.105373 ,0.051901 ,-0.009961 ,0.148629 ,0.018456 ,-0.190491 ,0.024485 ,-0.050883 ,0.122556 ,0.142697 ,0.082740 ,-0.122398 ,0.089629 ,-0.072630 ,0.057939 ,-0.007863 ,-0.010566 ,0.068654 ,-0.030312 ,0.018956 ,0.046021 ,-0.041010 ,-0.020975 ,-0.166173 ,-0.062801 ,-0.066530 ,0.162039 ,0.134114 ,0.014823 ,0.100028 ,0.105083 ,0.107804 ,-0.045582 ,-0.092209 ,-0.047610 ,-0.042537 ,-0.034095 ,-0.073341 ,0.135123 ,-0.048189 ,-0.041493 ,-0.025398 ,-0.094833 ,-0.064802 ,-0.019649 ,0.014077 ,0.032120 ,0.033822 ,0.023888 ,0.056394 ,0.008249 ,-0.032875 ,-0.031120 ,0.212474 ,-0.046583 ,-0.035367 ,-0.007214 ,-0.058035 ,0.013111 ,0.084618 ,0.148024 ,0.039395 ,-0.027320 ,0.077325 ,0.060422 ,-0.030944 ,0.045512 ,-0.003028 ,-0.011382 ,-0.020860 ,-0.033094 ,0.046179 ,0.000588 ,0.060370 ,0.034016 ,-0.047785 ,-0.036877 ,-0.068022 ,0.103618 ,-0.072384 ,-0.073665 ,-0.058571 ,-0.105873 ,-0.065504 ,-0.072147 ,-0.038491 ,0.012251 ,-0.007732 ,-0.133105 ,-0.035534 ,-0.045135 ,0.013813 ,0.005739 ,0.110358 ,-0.146664 ,-0.044187 ,-0.001931 ,0.027565 ,-0.061230 ,0.007609 ,0.020466 ,-0.041466 ,0.034744 ,0.118010 ,0.013006 ,-0.022738 ,-0.096123 ,-0.059606 ,0.084618 ,-0.104443 ,-0.114509 ,0.028899 ,0.036385 ,-0.152061 ,0.074060 ,0.018798 ,-0.125426 ,-0.006301 ,-0.005441 ,-0.036912 ,0.001150 ,-0.134974 ,0.015463 ,0.078448 ,-0.018833 ,-0.029013 ,0.127892 ,-0.014752 ,0.035727 ,0.027021 ,0.037192 ,-0.072059 ,-0.036683 ,-0.098791 ,-0.007626 ,-0.071243 ,0.060440 ,-0.076079 ,-0.039351 ,0.045644 ,0.088347 ,0.063099 ,0.048821 ,0.009610 ,0.016551 ,0.027381 ,0.112797 ,-0.093376 ,-0.114851 ,0.072814 ,-0.012409 ,0.059870 ,0.018166 ,-0.006819 ,-0.024511 ,0.125022 ,-0.010092 ,-0.019553 ,0.000913 ,-0.127444 ,-0.064108 ,0.027399 ,-0.003861 ,0.124224 ,0.045749 ,-0.061958 ,-0.040624 ,0.036508 ,0.066803 ,0.047179 ,-0.010645 ,-0.132324 ,0.196880 ,0.025090 ,0.011277 ,-0.033665 ,-0.065863 ,0.118976 ,0.105847};

float B1[] = {-0.102066,0.169254,0.020833,-0.061236,-0.110985,0.078217,-0.129061,-0.107352,0.006430,0.068502,0.102634,0.013288,0.107043,-0.058021,0.000538,-0.050117,0.031255,-0.029364,0.072195,0.017310,0.026378,-0.049431,0.024546,-0.020196,-0.035794,-0.047828,0.106655,0.036053,-0.010312,0.109213,0.120003,0.059563,0.034321,0.009864,0.050635,-0.101320,-0.011517,-0.021819,0.047290,-0.001314,0.061952,-0.046882,0.076186,0.090122,-0.060867,-0.153617,0.026059,-0.066352,-0.021460,-0.003653,-0.004320,0.083254,-0.020973,0.265368,-0.162177,0.028826,-0.003534,0.045648,-0.100394,-0.046723,0.074116,-0.101608,-0.012820,-0.083015,0.002588,-0.049421,0.048863,-0.099558,0.016444,0.048923,-0.066820,0.005047,-0.030707,-0.050914,0.050944,-0.025601,0.074892,0.030110,-0.078874,0.066282,-0.045578,-0.086817,-0.036033,-0.015030,-0.049371,-0.048525,0.068542,-0.029861,-0.109283,0.114260,0.012602,-0.099558,0.088828,0.014642,-0.071538,-0.051919,-0.009914,-0.087175,-0.007067,0.075121,-0.098771,0.022864,0.028796,0.017160,-0.075081,0.063017,0.027910,-0.093775,-0.015538,0.026885,0.084398,0.040821,0.035445,-0.070961,-0.109641,-0.074395,0.100195,-0.005405,0.138189,-0.140050,0.010860,-0.004041,0.116290,0.001394,0.014911,-0.074106,-0.004678,0.018932,-0.083562,0.019161,0.010352,-0.029294,-0.120829,0.065814,-0.080576,0.009357,-0.095148,0.055413,0.054806,0.000707,-0.032360,0.036292,0.057015,0.099697,-0.035764,-0.051073,-0.091864,-0.016205,-0.068850,0.128603,0.010103,-0.001891,-0.020594,-0.130614,-0.021062,-0.076784,0.046634,-0.050973,-0.053462,0.067507,-0.179547,-0.026258,0.004459,0.033853,0.000269,0.145783,-0.019718,-0.050804,0.017399,0.068960,-0.092650,0.001732,0.009924,-0.066004,0.073200,-0.078097,0.094233,-0.041955,-0.013677,-0.063664,-0.027164,0.083881,0.098951,0.111144,0.011686,0.197881,-0.013119,-0.035007,0.077659,-0.164954,0.008560,0.045578};
float B2[] = {0.127552 ,-0.007579 ,-0.030017 ,-0.015554 ,-0.066014 ,0.093426 ,-0.058764 ,-0.040634 ,0.071318 ,0.038123 ,-0.059225 ,-0.030731 ,0.103037 ,-0.092335 ,-0.013617 ,0.084229 ,-0.019362 ,0.028973 ,-0.034991 ,0.117556 ,-0.048185 ,0.082838 ,0.130261 ,0.010053 ,-0.132903 ,0.108435 ,-0.131229 ,0.137934 ,0.028315 ,0.118628 ,-0.049962 ,-0.041894 ,-0.127881 ,0.025936 ,-0.065017 ,0.123208 ,-0.027261 ,-0.060936 ,0.116945 ,0.024365 ,0.007316 ,0.025409 ,-0.036919 ,-0.022691 ,0.003667 ,-0.023876 ,0.060880 ,0.045608 ,0.014247 ,0.044122 ,-0.106864 ,-0.011924 ,-0.071120 ,-0.007241 ,0.049840 ,0.039486 ,-0.015977 ,0.044884 ,0.023218 ,0.107504 ,0.011520 ,0.086138 ,0.096116 ,0.130035 ,-0.011049 ,-0.001025 ,0.158453 ,-0.119221 ,-0.079603 ,0.072023 ,-0.130627 ,-0.023754 ,0.148494 ,0.048768 ,-0.070613 ,-0.066503 ,0.095429 ,-0.065817 ,-0.032433 ,0.019278 ,-0.111886 ,-0.027675 ,-0.055294 ,0.038113 ,-0.079471 ,0.157362 ,0.094009 ,0.050940 ,-0.081455 ,0.160541 ,-0.039703 ,0.096717 ,0.074026 ,0.027261 ,0.057147 ,0.003047 ,-0.070462 ,-0.072540 ,-0.097442 ,0.067622 ,0.012855 ,0.033233 ,0.034295 ,0.052435 ,-0.005332 ,-0.041508 ,-0.017698 ,0.012084 ,-0.053488 ,0.088715 ,-0.093191 ,0.006037 ,-0.090248 ,-0.032866 ,0.054213 ,0.045373 ,0.017246 ,0.039825 ,0.010297 ,-0.015196 ,-0.082405 ,-0.091677 ,-0.070086 ,-0.010918 ,0.169888 ,0.085113 ,0.122578 ,0.063014 ,0.019701 ,-0.045853 ,-0.130214 ,0.031108 ,0.082781 ,0.074177 ,-0.027948 ,0.115421 ,0.035650 ,0.097630 ,-0.043784 ,0.043464 ,0.068130 ,-0.053347 ,-0.031098 ,-0.075719 ,-0.038104 ,-0.123283 ,-0.021694 ,0.127402 ,-0.085226 ,-0.054730 ,-0.075014 ,0.010607 ,-0.067801 ,0.069672 ,-0.025983 ,-0.092269 ,-0.029039 ,-0.136768 ,0.085104 ,0.065328 ,-0.049539 ,0.015996 ,-0.037295 ,0.045862 ,0.026133 ,0.069879 ,-0.043267 ,0.040060 ,-0.003037 ,-0.047216 ,-0.037483 ,-0.011943 ,-0.106074 ,-0.067434 ,-0.067538 ,0.068976 ,-0.035048 ,-0.019898 ,-0.053573 ,0.068939 ,0.043408 ,0.074449 ,-0.067660 ,0.041292 ,-0.041489 ,0.194046 ,0.052520 ,0.014218 ,0.012874 ,-0.031117 ,0.076499 ,0.008416};


size_t mp_getmemused()
{
    struct rusage rusage;
    getrusage(RUSAGE_SELF, &rusage);
    return (size_t)(rusage.ru_maxrss);
}

size_t getms() 
{
    struct timeval time_v = { 0 };
    gettimeofday(&time_v, NULL);

    return (size_t)time_v.tv_sec * 1000 + time_v.tv_usec / 1000;
}


int main(int argc, char** argv)
{
    unsigned long long mem_begin,mem_end;

    int kDim = 192;
    Index<L2<float>> *index;
    SearchParams *search_par;
    index = new Index<L2<float>>(flann::KDTreeIndexParams());
    //index = new Index<L2<float>>(flann::KMeansIndexParams());
    //search_par = new flann::SearchParams(FLANN_CHECKS_AUTOTUNED);
    search_par = new flann::SearchParams(FLANN_CHECKS_UNLIMITED);
    //search_par = new flann::SearchParams();

    float* p = new float[kDim];

    
    float magicVal[kDim];
    for (int i = 0; i < kDim; ++i)
    {
        magicVal[i] = std::numeric_limits<float>::max();
    }
    Matrix<float> zeroSet(magicVal, 1, kDim);

    index->buildIndex(zeroSet);
    index->removePoint(0);

    float threshold = 0.5f;

    size_t i_index = 0;
    
{
    srand((int)time(0)); 
    if(1)
    {
        for(int i = 1; i <1000;i++)
        {
            Matrix<float> newPoint(A1, 1, kDim);
            index->addPoints(newPoint);
            i_index++;
            index->removePoint(i);
        }
    }
    {
        Matrix<float> newPoint(A1, 1, kDim);
        index->addPoints(newPoint); i_index++;
        printf("size %zu %zu\n", index->size(), i_index);
        Matrix<float> newPoint1(A2, 1, kDim);
        index->addPoints(newPoint1);i_index++;
        printf("size %zu\n", index->size());
        Matrix<float> newPoint2(A3, 1, kDim);
        index->addPoints(newPoint2);i_index++;
        printf("size %zu\n", index->size());
        Matrix<float> newPoint3(A4, 1, kDim);
        index->addPoints(newPoint3);i_index++;
        printf("size %zu\n", index->size());
        Matrix<float> newPoint4(A5, 1, kDim);
        index->addPoints(newPoint4);i_index++;
        printf("size %zu\n", index->size());
        Matrix<float> newPoint5(A6, 1, kDim);
        index->addPoints(newPoint5);i_index++;
        printf("size %zu\n", index->size());
        Matrix<float> newPoint6(A7, 1, kDim);
        index->addPoints(newPoint6);i_index++;
        printf("size %zu\n", index->size());
        Matrix<float> newPoint7(A8, 1, kDim);
        index->addPoints(newPoint7);i_index++;
        printf("size %zu index %zu\n", index->size(), i_index);
        index->removePoint(1);
        index->removePoint(1);
        printf("size %zu\n", index->size());
//        index->removePoint(1000);
//        index->removePoint(i_index);
        printf("size %zu\n", index->size());
        Matrix<float> newPoint8(A1, 1, kDim);
        index->addPoints(newPoint8);i_index++;
        printf("size %zu %zu %p\n", index->size(), i_index, A1);
        float *p = index->getPoint(i_index);
        index->removePoint(9);
//        index->removePoint(i_index);
        Matrix<float> newPoint9(A1, 1, kDim);
        index->addPoints(newPoint9);i_index++;
        float *p1 = index->getPoint(i_index);
        if(p && p1)
        {
            //A1[0] = 124.0f;
            
            printf("size %zu %p %f\n", index->size(), p, *p);
            printf("size %zu %p %f\n", index->size(), p1, *p1);
        }
    }
    mem_begin = mp_getmemused();
    
    for(int i = 0; i < 500000; i++)//16581
    {
        float total = 0;
        float *magicVal = new float[kDim];
        for (int i = 0; i < kDim; ++i)
        {
            magicVal[i] = random(1000) /(float)1000;
            total += magicVal[i] * magicVal[i];
        }
        float f32Sqrt = std::sqrt(total);
        for (int i = 0; i < kDim; ++i)
        {
            magicVal[i] = magicVal[i]/f32Sqrt;
        }
        Matrix<float> newPoint(magicVal, 1, kDim);
        index->addPoints(newPoint);i_index++;
    }
    mem_end = mp_getmemused();
    printf("mem %llu\n", mem_end - mem_begin);

    std::vector<std::vector<int>> indices;
    std::vector<std::vector<float>> dists;
    Matrix<float> *queryPt = new Matrix<float>(new float[1 * kDim], 1, kDim);
    memcpy(queryPt->ptr(), B1, sizeof(float) * kDim);
    float alpha = 2.5544236818f;
    float beta  = -3.9668512074f;

    if(0)
    {
        size_t begin=getms();
        index->knnSearch(*queryPt, indices, dists, 100, *search_par);
        size_t end=getms();
        printf("search %zu ms\n", end-begin);
    }
    if(1)
    {
        float find_threshold = 0.70001f;
        float tmp_find_threshold = FLT_MAX;
        if (find_threshold != 0)
        {
            tmp_find_threshold = (std::log(1 / find_threshold - 1) - beta) / alpha;
        }
        else
        {
            search_par->checks = -1;
        }
        size_t begin=getms();
        index->radiusSearch(*(queryPt), indices, dists, tmp_find_threshold, *search_par);
        size_t end=getms();
        printf("tmp_find_threshold %f \nsearch %zu ms\n", tmp_find_threshold, end-begin);
    }
    
    printf("size: %u, veclen: %u, usedMemory: %u, mem:%u\n", 
        (unsigned int)index->size(), 
        (unsigned int)index->veclen(),
        (unsigned int)index->usedMemory(),
        (unsigned int)index->size() * 4 * kDim / 1024);
        
    printf("indices.size %d\n", (int)indices.size());
    if (indices.size() > 0)
    {
        printf("indices[0].size %d\n", (int)indices[0].size());
        for(int i = 0; i < indices[0].size(); i++)
        {
            float *find_id_addr = index->getPoint(indices[0][i]);
            printf("indices %d  %f    euc: %f   cosin: %f   score: %f\n", (int)indices[0][i], *find_id_addr, dists[0][i], 1.0-dists[0][i]/(float)4,\
                1 / (float)(1 + std::exp(alpha*(dists[0][i]) + beta)));
        }
    }

    #if 0
    if (indices.size() > 0)
    {
        if (indices[0].size() == 0)
        {
            return 1;
        }
        else
        {
            float *find_id_addr = index->getPoint(indices[0][0]);
            float sum = 0;
            for (int i = 0; i < kDim; i++)
            {
                sum += A2[i] * find_id_addr[i];
            }
            sum += 1;
            sum /= 2.0;


            if (sum < (threshold + 0.001))
            {
                printf("");
            }

            //return indices[0][0];
        }
    }
    #endif
}
    
    #if 0
{
    std::vector<std::vector<int>> indices;
    std::vector<std::vector<float>> dists;
    indices.clear();
    dists.clear();
    float tmp_find_threshold = FLT_MAX;
    if (find_threshold != 0)
    {
        tmp_find_threshold = find_threshold * 2 - 1;
        tmp_find_threshold = 2.0 - 2.0 * tmp_find_threshold;
        tmp_find_threshold = pow(tmp_find_threshold, 0.5);
    }
    else
    {
        search_par->checks = -1;
    }
    //printf("find_threshold eu %f\n", tmp_find_threshold);

    Matrix<float> *queryPt = new Matrix<float>(new float[1 * kDim], 1, kDim);
    memcpy(queryPt->ptr(), pt, sizeof(float) * kDim);
    pthread_rwlock_rdlock(&indexRwLock);
    search_par->max_neighbors = -1;
    index->radiusSearch(*(queryPt), indices, dists, tmp_find_threshold, *search_par);
    //search_par->max_neighbors = 1;
}
#endif
    
    //index->getPoint(indices[0][0]);
    //index->removePoint(it2->first);
    delete index;

}
